from sympy.combinatorics import PermutationGroup
from SymGroup import SymGroup
from sympy.combinatorics.permutations import Permutation
import json

class Sym5(SymGroup):
    def __init__(self):
        SymGroup.__init__(self, 5)


    
    '''https://groupprops.subwiki.org/wiki/Subgroup_structure_of_symmetric_group:S5'''

    '''whole subgroup'''
    def group_Sym5(self):
        return self._sym_n

    '''trivial subgroup'''
    def group_Trivial(self):
        return PermutationGroup([Permutation([0, 1, 2, 3, 4])])

    '''S2 in S5'''
    def group_S2(self):
        return PermutationGroup([Permutation([1, 0, 2, 3, 4])])

    '''subgroup generated by double transposition in S5'''
    def group_Dbl_Trans(self):
        return PermutationGroup([Permutation([1, 0, 3, 2, 4])])

    '''subgroup generated by pair of disjoint transpositions in S5'''
    def group_pair_disj_trans(self):
        return PermutationGroup([Permutation([1, 0, 2, 3, 4]), Permutation([0, 1, 3, 2, 4]), Permutation([1, 0, 3, 2, 4])])

    '''subgroup generated by double transpositions on four elements in S5'''
    def group_dbl_trans_four(self):
        return PermutationGroup([Permutation([1, 0, 3, 2, 4]), Permutation([2, 3, 0, 1, 4]), Permutation([3, 2, 1, 0, 4])])

    '''Z4 in S5'''
    def group_Z4(self):
        return PermutationGroup([Permutation([3, 0, 1, 2, 4]), Permutation([2, 3, 0, 1, 4]), Permutation([1, 2, 3, 0, 4])])

    '''D8 in S5'''
    def group_D8(self):
        return PermutationGroup([Permutation([3, 0, 1, 2, 4]), Permutation([2, 1, 0, 3, 4])])

    '''Z3 in S5'''
    def group_Z3(self):
        return PermutationGroup([Permutation([2, 0, 1, 3, 4]), Permutation([1, 2, 0, 3, 4])])

    '''Z6 in S5'''
    def group_Z6(self):
        return PermutationGroup([Permutation([2, 0, 1, 3, 4]), Permutation([0, 1, 2, 4, 3])])

    '''S3 in S5'''
    def group_S3(self):
        return PermutationGroup([Permutation([2, 0, 1, 3, 4]), Permutation([1, 0, 2, 3, 4])])

    '''twisted S3 in S5'''
    def group_S3_twisted(self):
        return PermutationGroup([Permutation([2, 0, 1, 3, 4]), Permutation([1, 0, 2, 4, 3])])

    '''direct product of S3 and S2 in S5'''
    def group_S3_prod_S2(self):
        return PermutationGroup([Permutation([2, 0, 1, 3, 4]), Permutation([1, 0, 2, 3, 4]), Permutation([0, 1, 2, 4, 3])])

    '''A4 in S5'''
    def group_A4(self):
        return PermutationGroup([Permutation([1, 0, 3, 2, 4]), Permutation([2, 0, 1, 3, 4])])

    '''S4 in S5'''
    def group_S4(self):
        return PermutationGroup([Permutation([3, 0, 1, 2, 4]), Permutation([1, 0, 2, 3, 4])])

    '''Z5 in S5'''
    def group_Z5(self):
        return PermutationGroup([Permutation([4, 0, 1, 2, 3])])

    '''D10 in S5'''
    def group_D10(self):
        return PermutationGroup([Permutation([4, 0, 1, 2, 3]), Permutation([0, 4, 3, 2, 1])])

    '''GA(1,5) in S5'''
    def group_GA1_5(self):
        return PermutationGroup([Permutation([4, 0, 1, 2, 3]), Permutation([0, 3, 1, 4, 2])])

    '''A5 in S5'''
    def group_A5(self):
        return PermutationGroup([Permutation([4, 0, 1, 2, 3]), Permutation([2, 0, 1, 3, 4])])